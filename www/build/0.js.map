{"version":3,"sources":["../../src/pages/manage-document/manage-document.module.ts","../../src/pages/manage-document/manage-document.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ManageDocumentPage } from './manage-document';\n\n@NgModule({\n  declarations: [\n    ManageDocumentPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ManageDocumentPage),\n  ],\n})\nexport class ManageDocumentPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/manage-document/manage-document.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { DatabaseProvider } from '../../providers/database/database';\n\n\n@IonicPage({\n\tname: \"manage-document\"\n})\n@Component({\n  selector: 'page-manage-document',\n  templateUrl: 'manage-document.html',\n})\nexport class ManageDocumentPage {\n\n\n\n   /**\n    * @name form\n    * @type {object}\n    * @public\n    * @description     Defines an object for handling form validation\n    */\n   public form          : any;\n\n\n\n   /**\n    * @name records\n    * @type {object}\n    * @public\n    * @description     Defines an object for returning documents from Cloud Firestore database\n    */\n   public records       : any;\n\n\n\n   /**\n    * @name city\n    * @type {string}\n    * @public\n    * @description     Model for city form field\n    */\n   public city          : string          = '';\n\n\n\n   /**\n    * @name population\n    * @type {string}\n    * @public\n    * @description     Model for population form field\n    */\n   public population    : string          = '';\n\n\n\n   /**\n    * @name established\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public established \t: string          = '';\n\n\n\n   /**\n    * @name docID\n    * @type {string}\n    * @public\n    * @description     property that stores an edited document's ID\n    */\n   public docID         : string          = '';\n\n\n\n   /**\n    * @name isEditable\n    * @type {boolean}\n    * @public\n    * @description     property that stores value to signify whether\n                       we are editing an existing document or not\n    */\n   public isEditable    : boolean         = false;\n\n\n\n   /**\n    * @name title\n    * @type {string}\n    * @public\n    * @description     property that defines the template title value\n    */\n   public title \t\t: string\t\t   = 'Add a new document';\n\n\n\n   /**\n    * @name _COLL\n    * @type {string}\n    * @private\n    * @description     property that stores the value for the database collection\n    */\n   private _COLL \t\t: string \t\t\t= \"Britain\";\n\n\n   constructor(public navCtrl        : NavController,\n               public params         : NavParams,\n               private _FB \t         : FormBuilder,\n               private _DB           : DatabaseProvider,\n               private _ALERT        : AlertController)\n   {\n\n      // Use Formbuilder API to create a FormGroup object\n      // that will be used to programmatically control the\n      // form / form fields in the component template\n      this.form \t\t= _FB.group({\n         'city' \t\t        : ['', Validators.required],\n         'population' \t        : ['', Validators.required],\n         'established'\t        : ['', Validators.required]\n      });\n\n\n      // If we have navigation parameters then we need to\n      // parse these as we know these will be used for\n      // editing an existing record\n      if(params.get('isEdited'))\n      {\n          let record \t\t        = params.get('record');\n\n          this.city\t            = record.location.city;\n          this.population   \t  = record.location.population;\n          this.established      = record.location.established;\n          this.docID            = record.location.id;\n          this.isEditable       = true;\n          this.title            = 'Update this document';\n      }\n   }\n\n\n\n   /**\n    * Saves form data as newly added/edited record within Firebase Realtime\n    * database and handles uploading of media asset to Firebase Storage\n    *\n    * @public\n    * @method saveDocument\n    * @param  val          {any}              Form data\n    * @return {none}\n    */\n   saveDocument(val : any) : void\n   {\n      let city\t            : string\t\t= this.form.controls[\"city\"].value,\n\t \t      population        : string \t\t= this.form.controls[\"population\"].value,\n  \t\t    established       : string\t\t= this.form.controls[\"established\"].value;\n\n\n      // If we are editing an existing record then handle this scenario\n      if(this.isEditable)\n      {\n\n         // Call the DatabaseProvider service and pass/format the data for use\n         // with the updateDocument method\n         this._DB.updateDocument(this._COLL,\n                               this.docID,\n                               {\n\t                               city    \t\t : city,\n\t                               population    : population,\n\t                               established   : established\n\t                           })\n         .then((data) =>\n         {\n            this.clearForm();\n            this.displayAlert('Success', 'The document ' +  city + ' was successfully updated');\n         })\n         .catch((error) =>\n         {\n            this.displayAlert('Updating document failed', error.message);\n         });\n      }\n\n      // Otherwise we are adding a new record\n      else\n      {\n\n         // Call the DatabaseProvider service and pass/format the data for use\n         // with the addDocument method\n         this._DB.addDocument(this._COLL,\n                            {\n\t                           city    \t\t : city,\n\t                           population    : population,\n\t                           established   : established\n\t                        })\n         .then((data) =>\n         {\n            this.clearForm();\n            this.displayAlert('Record added', 'The document ' +  city + ' was successfully added');\n         })\n         .catch((error) =>\n         {\n            this.displayAlert('Adding document failed', error.message);\n         });\n      }\n   }\n\n\n\n   /**\n    * Provide feedback to user after an operation has succeeded/failed\n    *\n    * @public\n    * @method displayAlert\n    * @param  title          {String}           Heading for alert message\n    * @param  message        {String}           Content for alert message\n    * @return {none}\n    */\n   displayAlert(title      : string,\n                message    : string) : void\n   {\n      let alert : any     = this._ALERT.create({\n         title      : title,\n         subTitle   : message,\n         buttons    : ['Got it!']\n      });\n      alert.present();\n   }\n\n\n\n   /**\n    * Clear all form data\n    *\n    * @public\n    * @method clearForm\n    * @return {none}\n    */\n   clearForm() : void\n   {\n      this.city  \t\t\t\t\t= '';\n      this.population\t\t\t\t= '';\n      this.established \t\t\t\t= '';\n   }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/manage-document/manage-document.ts"],"sourceRoot":""}